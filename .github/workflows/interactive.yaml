name: interactive
run-name: "interactive: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}-${{ inputs.ROS_DISTRO || vars.ROS_DISTRO || 'one'}}-${{ inputs.ARCH || vars.ARCH || 'x64' }} ${{ inputs.ROS_SOURCES || vars.ROS_SOURCES }}"

on:
  workflow_dispatch:
    # The inputs should not define a default value.
    # If they do, this value would be passed even if nothing is actually entered in the dialog,
    # thus overriding any configuration variables set, which should be considered in this case.
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
    inputs:
      # target distro
      DEB_DISTRO:
        type: string
        required: true
        description: 'Ubuntu/Debian distro:'
        default: jammy
      ROS_DISTRO:
        type: string
        required: true
        description: 'ROS distribution codename:'
        default: one
      ARCH:
        type: choice
        required: true
        description: 'Architecture:'
        default: x64
        options:
          - x64
          - arm64

      # source selection
      ROS_SOURCES:
        type: string
        description: 'ROS sources to compile:'
        required: true
        default: '*.repos'
      COLCON_PKG_SELECTION:
        type: string
        description: 'colcon package selection:'
        required: false

      # build flow control
      CONTINUE_BUILD:
        type: boolean
        description: Continue previous build?
        required: true
        default: true
      SKIP_EXISTING:
        type: boolean
        description: Skip already built packages?
        required: false
        default: true
      CONTINUE_ON_ERROR:
        type: boolean
        description: Continue on build errors?
        required: false
        default: true
      # Installing built packages to chroot speeds up downstream builds?
      INSTALL_TO_CHROOT:
        type: boolean
        description: Incrementally fill chroot?
        required: false

# Don't allow concurrent runs of workflows deploying to same target
concurrency:
  group: build-and-deploy-to-${{ vars.DEPLOY_URL }}
  cancel-in-progress: false

jobs:
  stage-1:
    uses: ./.github/workflows/build.yaml
    with:
      DEB_DISTRO: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}
      ROS_DISTRO: ${{ inputs.ROS_DISTRO || vars.ROS_DISTRO || 'one' }}
      ARCH: ${{ inputs.ARCH || vars.ARCH || 'x64' }}
      ROS_SOURCES: ${{ inputs.ROS_SOURCES || vars.ROS_SOURCES }}
      INSTALL_GPG_KEYS: |
        sudo curl -sSL https://ros.packages.techfak.net/gpg.key -o /etc/apt/keyrings/ros-one-keyring.gpg
        sudo mkdir -p /etc/ros/rosdep/sources.list.d
        echo "yaml https://ros.packages.techfak.net/ros-one.yaml ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO || '' }}" | sudo tee /etc/ros/rosdep/sources.list.d/1-ros-one.list
      EXTRA_DEB_SOURCES: "${{ inputs.CONTINUE_BUILD && \
          format('deb [signed-by=/etc/apt/keyrings/ros-one-keyring.gpg] https://ros.packages.techfak.net {0}-testing main', \
                 inputs.DEB_DISTRO || vars.DEB_DISTRO) || '' }}"
      COLCON_PKG_SELECTION: ${{ inputs.COLCON_PKG_SELECTION || vars.COLCON_PKG_SELECTION || '' }}
      # proceed from existing debs artifact if run_attempt > 1
      DOWNLOAD_DEBS: ${{ github.run_attempt != '1' }}
      DEBS_ARTIFACT_NAME: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}-debs
      SKIP_EXISTING: ${{ inputs.SKIP_EXISTING }}
      CONTINUE_ON_ERROR: ${{ inputs.CONTINUE_ON_ERROR }}
      INSTALL_TO_CHROOT: ${{ inputs.INSTALL_TO_CHROOT || vars.INSTALL_TO_CHROOT || false }}

  stage-2:
    needs: stage-1
    if: needs.stage-1.result == 'success' || ${{ inputs.CONTINUE_ON_ERROR }}
    uses: ./.github/workflows/build.yaml
    with:
      DEB_DISTRO: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}
      ROS_DISTRO: ${{ inputs.ROS_DISTRO || vars.ROS_DISTRO || 'one' }}
      ARCH: ${{ inputs.ARCH || vars.ARCH || 'x64' }}
      ROS_SOURCES: ${{ inputs.ROS_SOURCES || vars.ROS_SOURCES }}
      INSTALL_GPG_KEYS: |
        sudo curl -sSL https://ros.packages.techfak.net/gpg.key -o /etc/apt/keyrings/ros-one-keyring.gpg
        sudo mkdir -p /etc/ros/rosdep/sources.list.d
        echo "yaml https://ros.packages.techfak.net/ros-one.yaml ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO || '' }}" | sudo tee /etc/ros/rosdep/sources.list.d/1-ros-one.list
      EXTRA_DEB_SOURCES: "${{ inputs.CONTINUE_BUILD && \
          format('deb [signed-by=/etc/apt/keyrings/ros-one-keyring.gpg] https://ros.packages.techfak.net {0}-testing main', \
                 inputs.DEB_DISTRO || vars.DEB_DISTRO) || '' }}"
      COLCON_PKG_SELECTION: ${{ inputs.COLCON_PKG_SELECTION || vars.COLCON_PKG_SELECTION || '' }}
      CONTINUE_FROM_PKG: ${{ needs.stage-1.outputs.LATEST_PACKAGE }}
      DOWNLOAD_DEBS: true
      DEBS_ARTIFACT_NAME: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}-debs
      SKIP_EXISTING: ${{ inputs.SKIP_EXISTING }}
      CONTINUE_ON_ERROR: ${{ inputs.CONTINUE_ON_ERROR }}
      INSTALL_TO_CHROOT: ${{ inputs.INSTALL_TO_CHROOT || vars.INSTALL_TO_CHROOT || false }}

  stage-3:
    needs: stage-2
    if: needs.stage-2.result == 'success' || ${{ inputs.CONTINUE_ON_ERROR }}
    uses: ./.github/workflows/build.yaml
    with:
      DEB_DISTRO: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}
      ROS_DISTRO: ${{ inputs.ROS_DISTRO || vars.ROS_DISTRO || 'one' }}
      ARCH: ${{ inputs.ARCH || vars.ARCH || 'x64' }}
      ROS_SOURCES: ${{ inputs.ROS_SOURCES || vars.ROS_SOURCES }}
      INSTALL_GPG_KEYS: |
        sudo curl -sSL https://ros.packages.techfak.net/gpg.key -o /etc/apt/keyrings/ros-one-keyring.gpg
        sudo mkdir -p /etc/ros/rosdep/sources.list.d
        echo "yaml https://ros.packages.techfak.net/ros-one.yaml ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO || '' }}" | sudo tee /etc/ros/rosdep/sources.list.d/1-ros-one.list
      EXTRA_DEB_SOURCES: "${{ inputs.CONTINUE_BUILD && \
          format('deb [signed-by=/etc/apt/keyrings/ros-one-keyring.gpg] https://ros.packages.techfak.net {0}-testing main', \
                 inputs.DEB_DISTRO || vars.DEB_DISTRO) || '' }}"
      COLCON_PKG_SELECTION: ${{ inputs.COLCON_PKG_SELECTION || vars.COLCON_PKG_SELECTION || '' }}
      CONTINUE_FROM_PKG: ${{ needs.stage-2.outputs.LATEST_PACKAGE }}
      DOWNLOAD_DEBS: true
      DEBS_ARTIFACT_NAME: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}-debs
      SKIP_EXISTING: ${{ inputs.SKIP_EXISTING }}
      CONTINUE_ON_ERROR: ${{ inputs.CONTINUE_ON_ERROR }}
      INSTALL_TO_CHROOT: ${{ inputs.INSTALL_TO_CHROOT || vars.INSTALL_TO_CHROOT || false }}

  deploy:
    needs: [stage-1, stage-2, stage-3]
    if: success() && vars.DEPLOY_URL
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Import build artifacts to reprepro server
        uses: ./reprepro
        with:
          url: "${{ vars.DEPLOY_URL }}?distro=${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}&run_id=${{ github.run_id }}&arch=${{ inputs.ARCH || vars.ARCH || 'x64' }}"
